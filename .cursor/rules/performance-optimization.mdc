---
description: 性能优化和最佳实践
globs: ["**/*.vue", "**/*.ts", "**/*.tsx"]
alwaysApply: false
---

# 性能优化和最佳实践

## Vue 组件性能优化

### 1. 组件懒加载
```typescript
// 路由级别的代码分割
const HomePage = () => import('@/pages/Home/HomePage.vue')
const ResourceListPage = () => import('@/pages/Resources/ResourceListPage.vue')

// 组件级别的懒加载
const LazyComponent = defineAsyncComponent(() => import('./LazyComponent.vue'))
```

### 2. 计算属性优化
```typescript
// 使用计算属性缓存复杂计算
const filteredResources = computed(() => {
  return resources.value.filter(resource => 
    resource.title.includes(searchKeyword.value)
  )
})

// 使用 shallowRef 优化大对象
const largeData = shallowRef<LargeDataType>({})
```

### 3. 事件处理优化
```typescript
// 使用防抖优化搜索
const debouncedSearch = useDebounceFn((keyword: string) => {
  searchResources(keyword)
}, 300)

// 使用节流优化滚动事件
const throttledScroll = useThrottleFn(() => {
  handleScroll()
}, 100)
```

## API 请求优化

### 1. 请求缓存
```typescript
// 使用缓存避免重复请求
const cache = new Map<string, any>()

const fetchWithCache = async (key: string, fetcher: () => Promise<any>) => {
  if (cache.has(key)) {
    return cache.get(key)
  }
  
  const result = await fetcher()
  cache.set(key, result)
  return result
}
```

### 2. 请求取消
```typescript
// 使用 AbortController 取消请求
const controller = new AbortController()

const fetchData = async () => {
  try {
    const response = await fetch('/api/data', {
      signal: controller.signal
    })
    return response.json()
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('请求被取消')
    }
  }
}

// 组件卸载时取消请求
onUnmounted(() => {
  controller.abort()
})
```

## 内存管理

### 1. 事件监听器清理
```typescript
// 自动清理事件监听器
onMounted(() => {
  const handleResize = () => {
    // 处理窗口大小变化
  }
  
  window.addEventListener('resize', handleResize)
  
  onUnmounted(() => {
    window.removeEventListener('resize', handleResize)
  })
})
```

### 2. 定时器清理
```typescript
// 清理定时器
const timer = ref<NodeJS.Timeout>()

onMounted(() => {
  timer.value = setInterval(() => {
    // 定时任务
  }, 1000)
})

onUnmounted(() => {
  if (timer.value) {
    clearInterval(timer.value)
  }
})
```

## 渲染优化

### 1. 虚拟滚动
```vue
<template>
  <RecycleScroller
    class="scroller"
    :items="items"
    :item-size="50"
    key-field="id"
    v-slot="{ item }"
  >
    <div class="item">{{ item.name }}</div>
  </RecycleScroller>
</template>
```

### 2. 条件渲染优化
```vue
<template>
  <!-- 使用 v-show 而不是 v-if 当频繁切换时 -->
  <div v-show="isVisible" class="frequent-toggle">
    频繁切换的内容
  </div>
  
  <!-- 使用 v-if 当条件很少改变时 -->
  <div v-if="hasData" class="rare-condition">
    很少改变的内容
  </div>
</template>
```

## 构建优化

### 1. 代码分割
```typescript
// vite.config.ts
export default defineConfig({
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['vue', 'vue-router', 'pinia'],
          ui: ['@headlessui/vue', '@heroicons/vue']
        }
      }
    }
  }
})
```

### 2. 资源优化
```typescript
// 图片懒加载
const lazyLoadImage = (img: HTMLImageElement, src: string) => {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        img.src = src
        observer.unobserve(img)
      }
    })
  })
  
  observer.observe(img)
}
```

## 性能监控

### 1. 性能指标
```typescript
// 监控页面加载性能
const measurePerformance = () => {
  const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming
  
  console.log('页面加载时间:', navigation.loadEventEnd - navigation.loadEventStart)
  console.log('DOM 构建时间:', navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart)
}
```

### 2. 错误监控
```typescript
// 全局错误处理
window.addEventListener('error', (event) => {
  console.error('全局错误:', event.error)
  // 发送错误报告
})

window.addEventListener('unhandledrejection', (event) => {
  console.error('未处理的 Promise 拒绝:', event.reason)
  // 发送错误报告
})
```